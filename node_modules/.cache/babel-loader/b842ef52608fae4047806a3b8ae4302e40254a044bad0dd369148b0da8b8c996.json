{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/Mobile Programming/Downloads/Dwellfi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mobile Programming\\\\Downloads\\\\Dwellfi\\\\src\\\\continents.jsx\",\n  _templateObject,\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport TableView from \"./tableView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar LIST_CONTINENTS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query {\\n    continents {\\n      name\\n      countries {\\n        name\\n        languages {\\n          native\\n          name\\n          code\\n        }\\n        phones\\n        emoji\\n        capital\\n        currency\\n      }\\n    }\\n  }\\n\"])));\nexport default function ContinentList() {\n  _s();\n  var _this = this;\n  var _useQuery = useQuery(LIST_CONTINENTS),\n    data = _useQuery.data,\n    loading = _useQuery.loading,\n    error = _useQuery.error;\n  if (loading || error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error ? error.message : \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Select Continent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), data.continents.map(function (continent, index) {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: continent.name,\n          children: continent.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n      defaultActiveKey: \"0\",\n      children: data.continents.map(function (continent, index) {\n        return /*#__PURE__*/_jsxDEV(Accordion.Item, {\n          eventKey: index,\n          children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n            children: continent.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n            children: /*#__PURE__*/_jsxDEV(TableView, {\n              tableData: continent.countries\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ContinentList, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n_c = ContinentList;\nvar _c;\n$RefreshReg$(_c, \"ContinentList\");","map":{"version":3,"names":["React","useEffect","useRef","useState","gql","useQuery","Accordion","TableView","jsxDEV","_jsxDEV","Fragment","_Fragment","LIST_CONTINENTS","_templateObject","_taggedTemplateLiteral","ContinentList","_s","_this","_useQuery","data","loading","error","children","message","fileName","_jsxFileName","lineNumber","columnNumber","continents","map","continent","index","value","name","defaultActiveKey","Item","eventKey","Header","Body","tableData","countries","_c","$RefreshReg$"],"sources":["C:/Users/Mobile Programming/Downloads/Dwellfi/src/continents.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\n\r\n\r\nimport TableView from \"./tableView\";\r\nconst LIST_CONTINENTS = gql`\r\n  query {\r\n    continents {\r\n      name\r\n      countries {\r\n        name\r\n        languages {\r\n          native\r\n          name\r\n          code\r\n        }\r\n        phones\r\n        emoji\r\n        capital\r\n        currency\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ContinentList() {\r\n  const { data, loading, error } = useQuery(LIST_CONTINENTS);\r\n\r\n  if (loading || error) {\r\n    return <p>{error ? error.message : \"Loading...\"}</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n    <select>\r\n      <option>\r\n        Select Continent\r\n      </option>\r\n        {data.continents.map((continent, index) => {\r\n          return (\r\n            <option key={index} value={continent.name}>{continent.name}</option>\r\n          )})}\r\n    </select>\r\n    \r\n\r\n      <Accordion defaultActiveKey=\"0\">\r\n        {data.continents.map((continent, index) => {\r\n          return (\r\n            <Accordion.Item eventKey={index}>\r\n              <Accordion.Header>{continent.name}</Accordion.Header>\r\n              <Accordion.Body>\r\n                <TableView tableData={continent.countries} />\r\n              </Accordion.Body>\r\n            </Accordion.Item>\r\n          );\r\n        })}\r\n      </Accordion>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE9C,OAAOC,SAAS,MAAM,2BAA2B;AAGjD,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACpC,IAAMC,eAAe,GAAGR,GAAG,CAAAS,eAAA,KAAAA,eAAA,GAAAC,sBAAA,6PAkB1B;AAED,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,KAAA;EACtC,IAAAC,SAAA,GAAiCb,QAAQ,CAACO,eAAe,CAAC;IAAlDO,IAAI,GAAAD,SAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,SAAA,CAAPE,OAAO;IAAEC,KAAK,GAAAH,SAAA,CAALG,KAAK;EAE5B,IAAID,OAAO,IAAIC,KAAK,EAAE;IACpB,oBAAOZ,OAAA;MAAAa,QAAA,EAAID,KAAK,GAAGA,KAAK,CAACE,OAAO,GAAG;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACtD;EAEA,oBACElB,OAAA,CAAAE,SAAA;IAAAW,QAAA,gBAEAb,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,EAAQ;MAER;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACNR,IAAI,CAACS,UAAU,CAACC,GAAG,CAAC,UAACC,SAAS,EAAEC,KAAK,EAAK;QACzC,oBACEtB,OAAA;UAAoBuB,KAAK,EAAEF,SAAS,CAACG,IAAK;UAAAX,QAAA,EAAEQ,SAAS,CAACG;QAAI,GAA7CF,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAV,KAAiD,CAAC;MACrE,CAAC,CAAC;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAGPlB,OAAA,CAACH,SAAS;MAAC4B,gBAAgB,EAAC,GAAG;MAAAZ,QAAA,EAC5BH,IAAI,CAACS,UAAU,CAACC,GAAG,CAAC,UAACC,SAAS,EAAEC,KAAK,EAAK;QACzC,oBACEtB,OAAA,CAACH,SAAS,CAAC6B,IAAI;UAACC,QAAQ,EAAEL,KAAM;UAAAT,QAAA,gBAC9Bb,OAAA,CAACH,SAAS,CAAC+B,MAAM;YAAAf,QAAA,EAAEQ,SAAS,CAACG;UAAI;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAV,KAAmB,CAAC,eACrDR,OAAA,CAACH,SAAS,CAACgC,IAAI;YAAAhB,QAAA,eACbb,OAAA,CAACF,SAAS;cAACgC,SAAS,EAAET,SAAS,CAACU;YAAU;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,GAAAV,KAAE;UAAC;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAV,KAC/B,CAAC;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAV,KACH,CAAC;MAErB,CAAC;IAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC;EAAA,eACZ,CAAC;AAEP;AAACX,EAAA,CAnCuBD,aAAa;EAAA,QACFV,QAAQ;AAAA;AAAAoC,EAAA,GADnB1B,aAAa;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}